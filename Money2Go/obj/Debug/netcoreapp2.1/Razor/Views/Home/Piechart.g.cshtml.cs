#pragma checksum "C:\Users\Dor\Desktop\Money2Go\Money2Go\Views\Home\Piechart.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "fd8b5c303435840fe19c104de0ff7d7d3a5e4f4a"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Piechart), @"mvc.1.0.view", @"/Views/Home/Piechart.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/Piechart.cshtml", typeof(AspNetCore.Views_Home_Piechart))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\Dor\Desktop\Money2Go\Money2Go\Views\_ViewImports.cshtml"
using Money2Go;

#line default
#line hidden
#line 2 "C:\Users\Dor\Desktop\Money2Go\Money2Go\Views\_ViewImports.cshtml"
using Money2Go.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"fd8b5c303435840fe19c104de0ff7d7d3a5e4f4a", @"/Views/Home/Piechart.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"75ef2477bd4dadeb3959c724977659104385592e", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Piechart : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 271, true);
            WriteLiteral(@"<!-- Create a div where the graph will take place -->
<div id=""my_dataviz""></div>

<div id=""my_dataviz2""></div>

<h2>Present how many comments was posted on some day.</h2>

<script>

    // create 2 data_set
    var data1 = [
        { group: ""Sunday"", value: ");
            EndContext();
            BeginContext(272, 20, false);
#line 12 "C:\Users\Dor\Desktop\Money2Go\Money2Go\Views\Home\Piechart.cshtml"
                             Write(ViewBag.sunday.Count);

#line default
#line hidden
            EndContext();
            BeginContext(292, 39, true);
            WriteLiteral(" },\r\n        { group: \"Monday\", value: ");
            EndContext();
            BeginContext(332, 20, false);
#line 13 "C:\Users\Dor\Desktop\Money2Go\Money2Go\Views\Home\Piechart.cshtml"
                             Write(ViewBag.monday.Count);

#line default
#line hidden
            EndContext();
            BeginContext(352, 40, true);
            WriteLiteral(" },\r\n        { group: \"Tuesday\", value: ");
            EndContext();
            BeginContext(393, 21, false);
#line 14 "C:\Users\Dor\Desktop\Money2Go\Money2Go\Views\Home\Piechart.cshtml"
                              Write(ViewBag.tuesday.Count);

#line default
#line hidden
            EndContext();
            BeginContext(414, 42, true);
            WriteLiteral(" },\r\n        { group: \"Wednesday\", value: ");
            EndContext();
            BeginContext(457, 23, false);
#line 15 "C:\Users\Dor\Desktop\Money2Go\Money2Go\Views\Home\Piechart.cshtml"
                                Write(ViewBag.wednesday.Count);

#line default
#line hidden
            EndContext();
            BeginContext(480, 41, true);
            WriteLiteral(" },\r\n        { group: \"Thursday\", value: ");
            EndContext();
            BeginContext(522, 22, false);
#line 16 "C:\Users\Dor\Desktop\Money2Go\Money2Go\Views\Home\Piechart.cshtml"
                               Write(ViewBag.thursday.Count);

#line default
#line hidden
            EndContext();
            BeginContext(544, 39, true);
            WriteLiteral(" },\r\n        { group: \"Friday\", value: ");
            EndContext();
            BeginContext(584, 20, false);
#line 17 "C:\Users\Dor\Desktop\Money2Go\Money2Go\Views\Home\Piechart.cshtml"
                             Write(ViewBag.friday.Count);

#line default
#line hidden
            EndContext();
            BeginContext(604, 41, true);
            WriteLiteral(" },\r\n        { group: \"Saturday\", value: ");
            EndContext();
            BeginContext(646, 22, false);
#line 18 "C:\Users\Dor\Desktop\Money2Go\Money2Go\Views\Home\Piechart.cshtml"
                               Write(ViewBag.saturday.Count);

#line default
#line hidden
            EndContext();
            BeginContext(668, 1777, true);
            WriteLiteral(@" },
    ];



    // set the dimensions and margins of the graph
    var margin = { top: 30, right: 30, bottom: 70, left: 60 },
        width = 460 - margin.left - margin.right,
        height = 400 - margin.top - margin.bottom;

    // append the svg object to the body of the page
    var svg = d3.select(""#my_dataviz"")
        .append(""svg"")
        .attr(""width"", width + margin.left + margin.right)
        .attr(""height"", height + margin.top + margin.bottom)
        .append(""g"")
        .attr(""transform"",
            ""translate("" + margin.left + "","" + margin.top + "")"");

    // X axis
    var x = d3.scaleBand()
        .range([0, width])
        .domain(data1.map(function (d) { return d.group; }))
        .padding(0.2);
    svg.append(""g"")
        .attr(""transform"", ""translate(0,"" + height + "")"")
        .call(d3.axisBottom(x))

    // Add Y axis
    var y = d3.scaleLinear()
        .domain([0, 20])
        .range([height, 0]);
    svg.append(""g"")
        .attr(""class"", ""myY");
            WriteLiteral(@"axis"")
        .call(d3.axisLeft(y));

    // A function that create / update the plot for a given variable:
    function update(data) {

        var u = svg.selectAll(""rect"")
            .data(data)

        u
            .enter()
            .append(""rect"")
            .merge(u)
            .transition()
            .duration(1000)
            .attr(""x"", function (d) { return x(d.group); })
            .attr(""y"", function (d) { return y(d.value); })
            .attr(""width"", x.bandwidth())
            .attr(""height"", function (d) { return height - y(d.value); })
            .attr(""fill"", ""#69b3a2"")
    }

    // Initialize the plot with the first dataset
    update(data1)

</script>
<div id=""my_dataviz2""></div>

");
            EndContext();
            DefineSection("Scripts", async() => {
                BeginContext(2462, 2439, true);
                WriteLiteral(@"
   
    <script>
        // set the dimensions and margins of the graph
        var margin = { top: 10, right: 30, bottom: 30, left: 60 },
            width = 460 - margin.left - margin.right,
            height = 400 - margin.top - margin.bottom;
        // append the svg object to the body of the page
        var svg = d3.select(""#my_dataviz2"")
            .append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"",
                ""translate("" + margin.left + "","" + margin.top + "")"");
        //Read the data
        d3.json(""Home/Test"",
            // Now I can use this dataset:
            function (data) {
                console.log(data);
                // Add X axis --> it is a date format
                var x = d3.scaleTime()
                    .domain(d3.extent(data, function (d) { return d3.timeParse(""%Y-%m-%d"")(d.date) }))
             ");
                WriteLiteral(@"       .range([0, width]);
                console.log(x);

                svg.append(""g"")
                    .attr(""transform"", ""translate(0,"" + height + "")"")
                    .call(d3.axisBottom(x));
                // Add Y axis
                var y = d3.scaleLinear()
                    .domain([8000, 9200])
                    .range([height, 0]);
                svg.append(""g"")
                    .call(d3.axisLeft(y));
                // Add the line
                svg.append(""path"")
                    .datum(data)
                    .attr(""fill"", ""none"")
                    .attr(""stroke"", ""#69b3a2"")
                    .attr(""stroke-width"", 1.5)
                    .attr(""d"", d3.line()
                        .x(function (d) { return x(d3.timeParse(""%Y-%m-%d"")(d.date)) })
                        .y(function (d) { return y(d.value) })
                    )
                // Add the points
                svg
                    .append(""g"")
                    .selec");
                WriteLiteral(@"tAll(""dot"")
                    .data(data)
                    .enter()
                    .append(""circle"")
                    .attr(""cx"", function (d) { return x(d3.timeParse(""%Y-%m-%d"")(d.date)) })
                    .attr(""cy"", function (d) { return y(d.value) })
                    .attr(""r"", 5)
                    .attr(""fill"", ""#69b3a2"")
            });
    </script>
");
                EndContext();
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
